{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#tcat-wiki","title":"TCAT Wiki","text":"<p>Welcome to the TCAT Wiki!</p>"},{"location":"#about-us","title":"About Us","text":""},{"location":"#the-taskar-center","title":"The Taskar Center","text":"<p>The Taskar Center for Accessible Technology (TCAT), housed by the Paul G. Allen School of Computer Science &amp; Engineering (CSE) at the University of Washington (UW), develops, translates, and deploys open source universally accessible technologies, with a focus on benefiting populations with motor limitations or speech impairment.</p>"},{"location":"about/","title":"About","text":"<p>The TCAT Wiki is built using Material for MkDocs.</p>"},{"location":"about/#guides","title":"Guides","text":"<p>Guides related to the TCAT Wiki itself.</p>"},{"location":"about/guides/","title":"About Guides","text":"<p>Guides for About.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"about/guides/#contributing","title":"Contributing","text":"<p>This guide explains how to contribute to the TCAT Wiki.</p>","tags":["Guide"]},{"location":"about/guides/CONTRIBUTING/","title":"Contributing","text":"<p>This guide explains how to contribute to the TCAT Wiki.</p> <p>Note that, while external contributions are welcome, this guide is primarily intended for use by TCAT/GS staff.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"about/guides/CONTRIBUTING/#full-installation-and-setup-windows-1011","title":"Full Installation and Setup (Windows 10/11)","text":"<p>This section of the guide explains how to set up a Windows environment for contributing to the TCAT Wiki.</p>","tags":["Guide"]},{"location":"about/guides/CONTRIBUTING/#legend","title":"Legend","text":"<ol> <li>Keyboard shortcut to press | Action</li> </ol> <p>(<code>Shift</code>+<code>C</code>) | Copy</p> <ol> <li>Command to enter into terminal</li> </ol> <p>[<code>someCommand --arguments \\&lt;path&gt;</code>]</p>","tags":["Guide"]},{"location":"about/guides/CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Install Visual Studio Code</p> </li> <li> <p>Install YAML plugin</p> </li> <li> <p>Install Markdown All in One plugin</p> </li> <li> <p>Install mkdocs-material</p> </li> <li> <p>In Powershell terminal:</p> <p>[<code>pip install mkdocs-material</code>]</p> </li> <li> <p>Install plugins</p> </li> <li> <p>In PowerShell terminal:</p> <p>[<code>pip install mkdocs-git-revision-date-localized-plugin</code>]</p> </li> <li> <p>In PowerShell terminal:</p> <p>[<code>pip install mkdocs-git-committers-plugin-2</code>]</p> </li> <li> <p>Install image processing dependencies</p> </li> <li> <p>In Powershell terminal:</p> <p>[<code>pip install \"mkdocs-material[imaging]\"</code>]</p> </li> <li> <p>Install MSYS2</p> <ol> <li> <p>In UCRT64 terminal:</p> <ol> <li> <p>Install cairo:</p> <p>[<code>pacman -S mingw-w64-ucrt-x86_64-cairo</code>]</p> </li> <li> <p>Install pngquant:</p> <p>[<code>pacman -S mingw-w64-ucrt-x86_64-pngquant</code>]</p> </li> </ol> </li> <li> <p>Add to PATH:</p> <p><code>C:\\msys64\\ucrt64\\bin</code></p> </li> </ol> </li> </ol>","tags":["Guide"]},{"location":"about/guides/CONTRIBUTING/#setup","title":"Setup","text":"<ol> <li>Using VS Code, clone <code>https://github.com/TaskarCenterAtUW/tcat-wiki</code></li> </ol>","tags":["Guide"]},{"location":"about/guides/CONTRIBUTING/#editing-instructions","title":"Editing Instructions","text":"<p>Refer to the documentation for Material for MkDocs and the MkDocs User Guide.</p>","tags":["Guide"]},{"location":"guides-list/","title":"Guides List","text":"<p>Guides, tutorials, and user manuals produced by TCAT and/or its partners are listed below.</p>"},{"location":"guides-list/#about-guides","title":"About Guides","text":""},{"location":"guides-list/#contributing","title":"Contributing","text":"<p>This guide explains how to contribute to the TCAT Wiki.</p>"},{"location":"guides-list/#opensidewalks-guides","title":"OpenSidewalks Guides","text":""},{"location":"guides-list/#core-edges-in-osw","title":"Core Edges in OSW","text":"<p>This guide shows how to convert existing sidewalk centerline datasets into OpenSidewalks (OSW) format for upload to the Transportation Data Exchange Initiative (TDEI).</p>"},{"location":"guides-list/#custom-points-in-osw","title":"Custom Points in OSW","text":"<p>This guide shows how to add custom non-routable point features (like bus stops) to an OpenSidewalks dataset using the Custom Points entity type.</p>"},{"location":"guides-list/#osw-in-osm","title":"OSW in OSM","text":"<p>This guide explains how to make edits to OpenStreetMap following and supporting the OpenSidewalks schema.</p>"},{"location":"guides-list/#tasking-manager-guides","title":"Tasking Manager Guides","text":""},{"location":"guides-list/#task-polygon-automation-guide","title":"Task Polygon Automation Guide","text":"<p>This guide shows the steps for an automated workflow that generates task polygons for use in Tasking Manager.</p>"},{"location":"guides-list/#accessmap-guides","title":"AccessMap Guides","text":"<p>Coming soon!</p>"},{"location":"guides-list/#walkshed-guides","title":"Walkshed Guides","text":"<p>Coming soon!</p>"},{"location":"guides-list/#imagery-capture-guides","title":"Imagery Capture Guides","text":""},{"location":"guides-list/#track-recording","title":"Track Recording","text":"<p>This guide explains how to use mobile applications to record GPS tracks.</p>"},{"location":"guides-list/#workspaces-guides","title":"Workspaces Guides","text":""},{"location":"guides-list/#workspaces-export-guide","title":"Workspaces Export Guide","text":"<p>This guide explains how to directly export a dataset in <code>.osm</code> format from Workspaces.</p>"},{"location":"guides-list/#aviv-scoutroute-guides","title":"AVIV ScoutRoute Guides","text":""},{"location":"guides-list/#aviv-scoutroute-user-manual","title":"AVIV ScoutRoute User Manual","text":"<p>This guide explains how to install and use the AVIV ScoutRoute mobile app.</p>"},{"location":"guides-list/#long-form-quest-definition-guides","title":"Long Form Quest Definition Guides","text":""},{"location":"guides-list/#element-query-guide","title":"Element Query Guide","text":"<p>This guide explains how to format the element query selector for use in AVIV ScoutRoute Long Form Quest Definitions.</p>"},{"location":"guides-list/#element-type-icon-guide","title":"Element Type Icon Guide","text":"<p>This guide explains how to assign the correct value for the <code>element_type_icon</code> key in the Long Form Quest Definition JSON file used by AVIV ScoutRoute.</p>"},{"location":"guides-list/#josm-guides","title":"JOSM Guides","text":""},{"location":"guides-list/#workspaces-josm-settings-guide","title":"Workspaces JOSM Settings Guide","text":"<p>This guide explains how to use the Workspaces JOSM Settings Script from TDEI Tools to set up JOSM to enable editing of Workspaces.</p>"},{"location":"guides-list/#rapid-guides","title":"Rapid Guides","text":"<p>Coming soon!</p>"},{"location":"guides-list/#tdei-core-guides","title":"TDEI Core Guides","text":""},{"location":"guides-list/#tdei-account-registration","title":"TDEI Account Registration","text":"<p>This guide explains how to register for a TDEI account using the TDEI Portal.</p>"},{"location":"opensidewalks/","title":"OpenSidewalks","text":"<p>OpenSidewalks (OSW) is an initiative led by the Taskar Center for Accessible Technology (TCAT) at the University of Washington (UW).</p> <p>OpenSidewalks seeks to provide a specification that is not only compatible with OpenStreetMap but is a comprehensive and accessibility-forward specification for mapping sidewalks and related pedestrian infrastructure features.</p>"},{"location":"opensidewalks/#opensidewalks-schema","title":"OpenSidewalks Schema","text":"<p>The OpenSidewalks Schema is a proposed open pedestrian transportation network data standard which draws from and is intended to be largely compatible with OpenStreetMap data.</p>"},{"location":"opensidewalks/#opensidewalks-tasking-manager","title":"OpenSidewalks Tasking Manager","text":"<p>The OpenSidewalks Tasking Manager is a Tasking Manager instance for coordinating contributions to OSM following OSW guidelines, and is open to all OSM users.</p> <p>Additional details about this organized editing activity can be found on the Organised Editing/Activities/OpenSidewalks page on the OSM Wiki.</p>"},{"location":"opensidewalks/#guides","title":"Guides","text":"<p>Guides for OpenSidewalks.</p>"},{"location":"opensidewalks/guides/","title":"OpenSidewalks Guides","text":"<p>Guides, tutorials, and user manuals related to OpenSidewalks and produced by TCAT and/or its partners are listed below.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"opensidewalks/guides/#core-edges-in-osw","title":"Core Edges in OSW","text":"<p>This guide shows how to convert existing sidewalk centerline datasets into OpenSidewalks (OSW) format for upload to the Transportation Data Exchange Initiative (TDEI).</p>","tags":["Guide"]},{"location":"opensidewalks/guides/#custom-points-in-osw","title":"Custom Points in OSW","text":"<p>This guide shows how to add custom non-routable point features (like bus stops) to an OpenSidewalks dataset using the Custom Points entity type.</p>","tags":["Guide"]},{"location":"opensidewalks/guides/#osw-in-osm","title":"OSW in OSM","text":"<p>This guide explains how to make edits to OpenStreetMap following and supporting the OpenSidewalks schema.</p>","tags":["Guide"]},{"location":"opensidewalks/guides/core-edges-in-osw/","title":"Core Edges in OSW","text":"<p>This guide shows how to convert existing sidewalk centerline datasets into OpenSidewalks (OSW) format for upload to the Transportation Data Exchange Initiative (TDEI).</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#what-are-sidewalk-centerlines","title":"What Are Sidewalk Centerlines?","text":"<p>Sidewalk centerlines are linear GIS features representing the middle path of sidewalk infrastructure. These datasets are commonly maintained by city transportation departments and typically include attributes like:</p> <ul> <li>Width information: Sidewalk dimensions and measurements</li> <li>Surface conditions: Material type and maintenance status</li> <li>Location data: Street names, sides, and block segments</li> <li>Maintenance records: Installation dates and inspection history</li> </ul> <p>Converting these datasets to OSW format enables pedestrian routing, accessibility analysis, and integration with other transportation data through TDEI.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#case-study-seattle-sidewalk-centerlines-to-osw","title":"Case Study: Seattle Sidewalk Centerlines to OSW","text":"<p>This example demonstrates converting a city's sidewalk centerline dataset to OSW format using Seattle's sidewalk inventory data.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#understanding-the-source-data","title":"Understanding the Source Data","text":"<p>Seattle's sidewalk dataset contains LineString features with detailed attributes:</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"id\": 22276849,\n  \"geometry\": {\n    \"type\": \"LineString\",\n    \"coordinates\": [[1270173.15, 221881.27], [1270372.84, 221876.92]]\n  },\n  \"properties\": {\n    \"OBJECTID\": 22276849,\n    \"UNITID\": \"SDW-35269\",\n    \"UNITDESC\": \"S KING ST BETWEEN 1ST AVE S AND OCCIDENTAL W AVE S, N SIDE\",\n    \"SW_WIDTH\": 124,\n    \"CONDITION\": \"POOR\", \n    \"SURFTYPE\": \"PCC\",\n    \"SIDE\": \"N\",\n    \"PRIMARYCROSSSLOPE\": 5.3,\n    \"INSTALL_DATE\": null,\n    \"LAST_VERIFY_DATE\": \"Fri, 23 Jun 2017 00:00:00 GMT\"\n  }\n}\n</code></pre>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#the-target-osw-footway-edges","title":"The Target: OSW Footway Edges","text":"<p>We want to convert each sidewalk centerline into an OpenSidewalks footway that looks like this:</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"LineString\", \n    \"coordinates\": [[-122.3321, 47.6062], [-122.3325, 47.6065]]\n  },\n  \"properties\": {\n    \"_id\": \"sidewalk_sdw_35269\",\n    \"highway\": \"footway\",\n    \"footway\": \"sidewalk\",\n    \"width\": 3.78,\n    \"surface\": \"concrete\",\n    \"ext:unit_id\": \"SDW-35269\",\n    \"ext:description\": \"S KING ST BETWEEN 1ST AVE S AND OCCIDENTAL W AVE S, N SIDE\",\n    \"ext:condition\": \"POOR\",\n    \"ext:side\": \"N\",\n    \"ext:cross_slope\": 5.3,\n    \"ext:last_verify_date\": \"2017-06-23\"\n  }\n}\n</code></pre>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#step-by-step-conversion-process","title":"Step-by-Step Conversion Process","text":"","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#step-1-coordinate-system-transformation","title":"Step 1: Coordinate System Transformation","text":"<p>Most city GIS datasets use local coordinate systems. Seattle uses EPSG:2926 - NAD83 / Washington South. OSW requires WGS84 decimal degrees (EPSG:4326).</p> <p>Transform coordinates before conversion:</p> <ul> <li>Use GIS software (QGIS, ArcGIS) or GDAL utilities</li> </ul>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#step-2-map-fields-to-osw-structure","title":"Step 2: Map Fields to OSW Structure","text":"<p>Create a mapping between your dataset fields and OSW properties:</p> Source Field Goes in OSW as Notes <code>&lt;geometry coordinates&gt;</code> <code>geometry.coordinates</code> Must be EPSG:4326 (WGS84) <code>UNITID</code> <code>_id</code> Create unique OSW ID (e.g., \"sidewalk_\" + unit_id) <code>UNITID</code> <code>ext:unit_id</code> Keep original ID for reference <code>UNITDESC</code> <code>ext:description</code> Preserve location description <code>SW_WIDTH</code> <code>width</code> Convert to meters if in different units <code>SURFTYPE</code> <code>surface</code> Map to OSW surface values (see Step 3) <code>CONDITION</code> <code>ext:condition</code> Preserve condition assessment <code>SIDE</code> <code>ext:side</code> Road side (N/S/E/W) <code>PRIMARYCROSSSLOPE</code> <code>ext:cross_slope</code> Cross slope percentage <code>LAST_VERIFY_DATE</code> <code>ext:last_verify_date</code> Convert to ISO 8601 format <p>Required OSW Core Entity Fields:</p> <ul> <li><code>_id</code>: Unique identifier (string, letters/numbers/underscores)</li> <li><code>geometry</code>: LineString coordinates in WGS84</li> <li><code>highway=footway</code> + <code>footway=sidewalk</code>: Sidewalk Core Entity tag</li> </ul>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#step-3-standardize-surface-types","title":"Step 3: Standardize Surface Types","text":"<p>Map your dataset's surface codes to OSW-compatible values:</p> Source Code OSW Surface Value Description <code>PCC</code> <code>concrete</code> Portland cement concrete <code>AC</code> <code>asphalt</code> Asphalt concrete <code>UIMPRV</code> <code>unpaved</code> Unimproved/dirt surface <code>BR</code> <code>paving_stones</code> Brick pavers","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#step-4-handle-width-measurements","title":"Step 4: Handle Width Measurements","text":"<p>Convert width measurements to meters and include in the <code>width</code> property.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#step-5-create-the-geojson-structure","title":"Step 5: Create the GeoJSON Structure","text":"<p>Build the complete OSW dataset:</p> <pre><code>{\n  \"$schema\": \"https://sidewalks.washington.edu/opensidewalks/0.3/schema.json\",\n  \"type\": \"FeatureCollection\",\n  \"dataSource\": {\n    \"name\": \"Seattle Department of Transportation\",\n    \"license\": \"Open Data Commons Attribution License\"\n  },\n  \"dataTimestamp\": \"2025-09-10T00:00:00Z\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [[-122.3321, 47.6062], [-122.3325, 47.6065]]\n      },\n      \"properties\": {\n        \"_id\": \"sidewalk_sdw_35269\",\n        \"highway\": \"footway\",\n        \"footway\": \"sidewalk\",\n        \"width\": 3.78,\n        \"surface\": \"concrete\",\n        \"ext:unit_id\": \"SDW-35269\",\n        \"ext:description\": \"S KING ST BETWEEN 1ST AVE S AND OCCIDENTAL W AVE S, N SIDE\",\n        \"ext:condition\": \"POOR\"\n      }\n    }\n  ]\n}\n</code></pre>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#conversion-tools-and-scripts","title":"Conversion Tools and Scripts","text":"<p>As some processing of the existing data is usually necessary, consider creating Python scripts or using ogr2ogr to make the necessary changes.</p> <p>The following is an example, not intended to be used directly!</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#example-gdalogr-command-line","title":"Example: GDAL/OGR Command Line","text":"<pre><code># Reproject to WGS84\nogr2ogr -s_srs EPSG:2926 -t_srs EPSG:4326 sidewalks_epsg4326.geojson sidewalks_epsg2926.geojson\n\n# Use ogr2ogr with SQL to transform fields\nogr2ogr -f GeoJSON output.geojson sidewalks_epsg4326.geojson -sql \"SELECT UNITID as ext_unit_id, UNITDESC as ext_description, 'footway' as highway, 'sidewalk' as footway, SW_WIDTH * 0.0254 as width, CASE WHEN SURFTYPE = 'PCC' THEN 'concrete' WHEN SURFTYPE = 'AC' THEN 'asphalt' ELSE 'unknown' END as surface FROM input_layer\"\n</code></pre>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#validation-and-quality-assurance","title":"Validation and Quality Assurance","text":"","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#data-quality-checks","title":"Data Quality Checks","text":"<ol> <li>Coordinate System: Verify all coordinates are in WGS84 decimal degrees</li> <li>Unique IDs: Ensure all <code>_id</code> values are unique across the dataset</li> <li>Required Fields: Every feature must have <code>_id</code>, <code>highway=footway</code>, and <code>footway=sidewalk</code></li> <li>Geometry Validity: All LineStrings should have at least 2 coordinate pairs</li> </ol>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#common-issues-and-fixes","title":"Common Issues and Fixes","text":"Problem Solution Coordinates in wrong projection Use <code>ogr2ogr</code> or GIS reprojection tools Duplicate IDs Add prefixes or suffixes to ensure uniqueness Missing width data Omit width property Invalid surface types Create comprehensive surface mapping table Broken geometry Use <code>ST_MakeValid()</code> or geometry repair tools","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#validation-tools","title":"Validation Tools","text":"<ul> <li>GeoJSON validation: Use geojson.io or offline validators</li> <li>OSW schema validation: Check against OpenSidewalks schema</li> <li>Visual inspection: Load in QGIS or web mapping tools</li> <li>Attribute completeness: Verify required and optional fields</li> </ul>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#integration-with-tdei","title":"Integration with TDEI","text":"","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#best-practices-for-tdei-upload","title":"Best Practices for TDEI Upload","text":"<ul> <li>Regular updates: Plan for periodic data refreshes</li> <li>Quality documentation: Document data collection methods and accuracy</li> <li>Contact information: Provide maintainer contact for data issues</li> </ul>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#advanced-considerations","title":"Advanced Considerations","text":"","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#handling-complex-geometries","title":"Handling Complex Geometries","text":"<p>Some sidewalk centerlines may include: - Multi-segment paths: Keep as single LineString if continuous - Branching sidewalks: Split into separate features at intersections - Curved sections: Maintain vertex density for accurate representation</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/core-edges-in-osw/#accessibility-attributes","title":"Accessibility Attributes","text":"<p>Enhance OSW data with additional accessibility information:</p> <pre><code>\"properties\": {\n  \"_id\": \"sidewalk_001\",\n  \"highway\": \"footway\",\n  \"footway\": \"sidewalk\", \n  \"incline\": \"2%\",\n  \"ext:condition\": \"good\",\n  \"ext:cross_slope\": 1.8,\n  \"ext:ada_compliance\": \"yes\"\n}\n</code></pre> <p>This comprehensive conversion creates routable pedestrian network data that integrates with transportation analysis tools and supports accessibility planning through the TDEI platform.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/","title":"Custom Points in OSW","text":"<p>This guide shows how to add custom non-routable point features (like bus stops) to an OpenSidewalks dataset using the Custom Points entity type.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#what-are-custom-points","title":"What are Custom Points?","text":"<p>Custom Points in OpenSidewalks are user-defined non-routable point features that extend the schema beyond the predefined Core Entities and Adjacent Entities point types. While OpenSidewalks includes many built-in point types like fire hydrants, benches, and street lamps, Custom Points let you add any custom feature! </p> <p>Doing so is simple - just prefix <code>ext:</code> before the tags that are not in the OSW schema.</p> <p>This approach allows for immediately adding custom data, preserving data from existing systems.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#common-use-cases","title":"Common Use Cases","text":"<p>Custom Points are perfect for adding:</p> <ul> <li>Transit infrastructure: Bus stops, public transport shelters</li> <li>Accessibility features: Accessible parking spaces, wheelchair-accessible entrances, elevators</li> <li>Wayfinding aids: Information kiosks, signage</li> <li>Points of interest: Water fountains, ATMs, restrooms</li> </ul>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#case-study-gtfs-bus-stops-to-osw-custom-points","title":"Case Study: GTFS Bus Stops to OSW Custom Points","text":"<p>In this example, we'll convert bus stop data from a GTFS <code>stops.txt</code> file into OpenSidewalks Custom Points. This is a common scenario for transit agencies and cities wanting to integrate public transportation data with pedestrian network information.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#understanding-the-source-data","title":"Understanding the Source Data","text":"<p>A typical GTFS <code>stops.txt</code> file contains bus stop information like this:</p> <pre><code>stop_id,stop_code,stop_name,stop_desc,stop_lat,stop_lon,zone_id,stop_url,location_type,parent_station\n1001,1001,Main St &amp; 1st Ave,Northbound stop,47.6062,-122.3321,,http://example.com/stops/1001,0,\n1002,1002,Main St &amp; 2nd Ave,Southbound stop,47.6065,-122.3325,,http://example.com/stops/1002,0,\n</code></pre>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#the-target-osw-custom-points","title":"The Target: OSW Custom Points","text":"<p>We want to convert each bus stop into an OpenSidewalks Custom Point that looks like this:</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-122.3321, 47.6062]\n  },\n  \"properties\": {\n    \"_id\": \"bus_stop_1001\",\n    \"ext:stop_id\": \"1001\",\n    \"ext:stop_code\": \"1001\", \n    \"ext:stop_name\": \"Main St &amp; 1st Ave\",\n    \"ext:stop_desc\": \"Northbound stop\",\n    \"ext:stop_url\": \"http://example.com/stops/1001\"\n  }\n}\n</code></pre>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#step-by-step-conversion-process","title":"Step-by-Step Conversion Process","text":"","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#step-1-prepare-your-data","title":"Step 1: Prepare Your Data","text":"<p>Start with your GTFS <code>stops.txt</code> file. You'll need these key fields: - <code>stop_lat</code> and <code>stop_lon</code> (for coordinates) - <code>stop_id</code> (for unique identification) - Any other fields you want to preserve (name, description, etc.)</p> <p>Quality check your data: - Remove any stops with missing coordinates - Ensure stop_id values are unique - Verify coordinates are in decimal degrees (WGS84)</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#step-2-map-fields-to-osw-structure","title":"Step 2: Map Fields to OSW Structure","text":"<p>Create a mapping between your GTFS fields and OSW Custom Point properties:</p> GTFS Field Goes in OSW as Notes <code>stop_lon</code>, <code>stop_lat</code> <code>geometry.coordinates</code> Longitude first, then latitude <code>stop_id</code> <code>_id</code> Create unique OSW ID (e.g., \"bus_stop_\" + stop_id) <code>stop_id</code> <code>ext:stop_id</code> Keep original ID for reference <code>stop_name</code> <code>ext:stop_name</code> Preserve original name <code>stop_desc</code> <code>ext:stop_desc</code> Optional description <code>stop_code</code> <code>ext:stop_code</code> Display code, if different from ID <code>stop_url</code> <code>ext:stop_url</code> Link to more information <p>A note on the <code>_id</code> field: Every OSW entity needs a unique <code>_id</code> (string with at least one character). For bus stops, consider using a prefix like \"bus_stop_\" + the original stop_id to avoid conflicts with other features. Letters, numbers, and underscores are all fine!</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#step-3-create-the-geojson-structure","title":"Step 3: Create the GeoJSON Structure","text":"<ul> <li>Required fields like <code>_id</code> go directly in <code>properties</code></li> <li>Custom fields get the <code>ext:</code> prefix and go in <code>properties</code></li> <li>Geometry goes in the <code>geometry</code> section, not <code>properties</code></li> </ul> <p>Your Custom Points need to be formatted as GeoJSON Features within a FeatureCollection. Here's how the field mapping from Step 2 translates into actual JSON:</p> <pre><code>{\n  \"$schema\": \"https://sidewalks.washington.edu/opensidewalks/0.3/schema.json\",\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-122.3321, 47.6062]   // stop_lon, stop_lat\n      },\n      \"properties\": {\n        \"_id\": \"bus_stop_1001\",               // Required OSW field\n        \"ext:stop_id\": \"1001\",                // Original GTFS stop_id\n        \"ext:stop_name\": \"Main St &amp; 1st Ave\", // Original GTFS stop_name  \n        \"ext:stop_desc\": \"Northbound stop\"    // Original GTFS stop_desc\n      }\n    }\n  ]\n}\n</code></pre> <p>Key Structure Points: - All of the GTFS data fields (except coordinates) go in the <code>properties</code> section - Custom fields like <code>ext:stop_name</code> are the actual field names in your JSON - The <code>ext:</code> prefix is part of the field name, not a folder structure</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#step-4-add-dataset-metadata","title":"Step 4: Add Dataset Metadata","text":"<p>Include required OpenSidewalks metadata at the dataset level:</p> <pre><code>{\n  \"$schema\": \"https://sidewalks.washington.edu/opensidewalks/0.3/schema.json\",\n  \"type\": \"FeatureCollection\",\n  \"dataSource\": {\n    \"name\": \"Metro Transit GTFS\",\n    \"license\": \"Public Domain\"\n  },\n  \"dataTimestamp\": \"2024-12-01T00:00:00Z\",\n  \"features\": [\n    // ... your custom points here\n  ]\n}\n</code></pre>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#conversion-tools","title":"Conversion Tools","text":"","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#option-1-purpose-built-scripts","title":"Option 1: Purpose-built Scripts","text":"<p>In the specific case of GTFS stops, a script such as this one created by TCAT, gtfs-to-tdei-converter.ps1, can be used.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#option-2-online-json-tools","title":"Option 2: Online JSON Tools","text":"<p>Use your spreadsheet software of choice to add <code>ext:</code> prefix to column headers, then convert CSV to GeoJSON: - https://geojson.io/ - https://mapbox.github.io/csv2geojson/</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#validation-and-quality-assurance","title":"Validation and Quality Assurance","text":"","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#check-your-output","title":"Check Your Output","text":"<p>Before using your Custom Points, verify:</p> <ol> <li>Valid GeoJSON: Use geojson.io or a JSON validator</li> <li>Coordinate format: Longitude first, then latitude</li> <li>Unique IDs: Each <code>_id</code> appears only once</li> <li>Required fields: Every Custom Point has an <code>_id</code> and valid coordinates</li> <li>Custom fields: All additional data uses the <code>ext:</code> prefix</li> </ol>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#common-issues-and-fixes","title":"Common Issues and Fixes","text":"Problem Solution Coordinates reversed Longitude should be first: <code>[lng, lat]</code> Missing <code>_id</code> field Add unique identifier to each feature Invalid JSON Use a JSON validator to find syntax errors Coordinate precision GTFS uses 6+ decimal places; preserve precision","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#integration-with-existing-osw-data","title":"Integration with Existing OSW Data","text":"","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#manual-adding-to-existing-datasets","title":"Manual Adding to Existing Datasets","text":"<p>To add Custom Points to an existing OpenSidewalks dataset:</p> <ol> <li>Load your existing .osw file</li> <li>Add your Custom Point features to the <code>features</code> array</li> <li>Ensure all <code>_id</code> values remain unique across the entire dataset</li> </ol>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#coordinate-system-compatibility","title":"Coordinate System Compatibility","text":"<p>OpenSidewalks uses WGS84 (EPSG:4326) coordinates in decimal degrees. GTFS data is already in this format, so no conversion is needed. If your source data uses a different coordinate system, you'll need to reproject it first.</p>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#best-practices","title":"Best Practices","text":"","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/custom-points-in-osw/#fields","title":"Fields","text":"<ul> <li>Use descriptive <code>ext:</code> field names: <code>ext:stop_name</code> not <code>ext:name</code></li> <li>Keep original field names when possible for easier maintenance</li> <li>Be consistent across all your Custom Points</li> <li>Remove unnecessary fields to keep file sizes manageable</li> </ul>","tags":["Guide","OSW 0.3"]},{"location":"opensidewalks/guides/osw-in-osm/","title":"OpenSidewalks in OpenStreetMap","text":"<p>This guide explains how to make edits to OpenStreetMap following and supporting the OpenSidewalks schema.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p> <p>OpenSidewalks is an open data project by the Taskar Center for Accessible Technology at the University of Washington in Seattle. The project heavily relies on the OpenStreetMap infrastructure, mapping standards, and volunteer community.</p>","tags":["Guide"]},{"location":"opensidewalks/guides/osw-in-osm/#welcome","title":"Welcome","text":"<p>OpenSidewalks (OSW) is a project that engages wide audiences in the important work of collaborative open source mapping of pedestrian pathways and related features. Our mission is to create a tooling ecosystem that supports the consistent, standardized collection of data about the pedestrian environment. This open and shared data can then be used to enable pedestrian routing applications, inform infrastructure planning, and advocate for improved walkability, accessibility, and quality of life for all.</p> <p>This learning resource contains material to help you create accessible pedestrian pathways data that is shared in the global, open source OpenStreetMap database. As we continue to engage with more cities in our mission to improve and scale the documentation of pedestrian pathways, we maintain this self-paced training resource to enable the participation of mapping contributors.</p> <p>Because the OpenStreetMap community is constantly evolving, mapping guidance is always changing with it. Consequently, we recommend that the use of this guide is combined with consultation with the OpenStreetMap Wiki as well as the local OSM community.</p> <p>Thank you for your interest in OpenSidewalks. Together, we can work towards creating inclusive and accessible data about the pedestrian environment that benefits communities worldwide!</p>","tags":["Guide"]},{"location":"opensidewalks/schema/","title":"OpenSidewalks Schema","text":"<p>The OpenSidewalks Schema is a proposed open pedestrian transportation network data standard which draws from and is intended to be largely compatible with OpenStreetMap data.</p>"},{"location":"opensidewalks/tasking-manager/","title":"OpenSidewalks Tasking Manager","text":"<p>The OpenSidewalks Tasking Manager is a Tasking Manager instance for coordinating contributions to OSM following OSW guidelines and is open to all OSM users.</p> <p>Additional details about this organized editing activity can be found on the Organised Editing/Activities/OpenSidewalks page on the OSM Wiki.</p>"},{"location":"opensidewalks/tasking-manager/#guides","title":"Guides","text":"<p>Guides for the Tasking Manager.</p>"},{"location":"opensidewalks/tasking-manager/guides/","title":"Tasking Manager Guides","text":"<p>Guides for OpenSidewalks Tasking Manager.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/#task-polygon-automation-guide","title":"Task Polygon Automation Guide","text":"<p>This guide shows the steps for an automated workflow that generates task polygons for use in Tasking Manager.</p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/","title":"Task Polygon Automation Guide","text":"<p>This guide shows the steps for an automated workflow that generates task polygons for use in Tasking Manager.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#task-polygon-automation-process","title":"Task Polygon Automation Process","text":"<p>This guide outlines the step-by-step process for automating task polygon generation for OpenSidewalks communities.</p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#prerequisites","title":"Prerequisites","text":"<ul> <li><code>poetry shell</code> environment activated</li> <li><code>osmium</code> command-line tool installed</li> <li><code>osw task</code> command available</li> </ul>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#process-overview","title":"Process Overview","text":"","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-1-initialize-staging-directory","title":"Step 1: Initialize Staging Directory","text":"<p>Action: Create the <code>staging_directory</code> in <code>/projects/osw/opensidewalks_cli/</code></p> <p>Command: <pre><code>mkdir staging_directory\n</code></pre></p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-2-create-state-structure","title":"Step 2: Create State Structure","text":"<p>Action: Create a folder for each state within the staging directory.</p> <p>Directory structure: <pre><code>staging_directory/\n\u2514\u2500\u2500 &lt;state&gt;/\n</code></pre></p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-3-create-county-structure","title":"Step 3: Create County Structure","text":"<p>Action: Create a subfolder for each county within each state folder.</p> <p>Directory structure: <pre><code>staging_directory/\n\u2514\u2500\u2500 &lt;state&gt;/\n    \u2514\u2500\u2500 &lt;county&gt;/\n</code></pre></p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-4-create-community-structure","title":"Step 4: Create Community Structure","text":"<p>Action: Create a subfolder for each community within each county folder.</p> <p>Directory structure: <pre><code>staging_directory/\n\u2514\u2500\u2500 &lt;state&gt;/\n    \u2514\u2500\u2500 &lt;county&gt;/\n        \u2514\u2500\u2500 &lt;community&gt;/\n</code></pre></p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-5-create-working-subfolders","title":"Step 5: Create Working Subfolders","text":"<p>Action: Create working subfolders (<code>data_sources</code>, <code>intermediate_data</code>, <code>output</code>) for each community.</p> <p>Directory structure: <pre><code>staging_directory/\n\u2514\u2500\u2500 &lt;state&gt;/\n    \u2514\u2500\u2500 &lt;county&gt;/\n        \u2514\u2500\u2500 &lt;community&gt;/\n            \u251c\u2500\u2500 data_sources/\n            \u251c\u2500\u2500 intermediate_data/\n            \u2514\u2500\u2500 output/\n</code></pre></p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-6-obtain-osm-pbf-files","title":"Step 6: Obtain OSM PBF Files","text":"<p>Action: Obtain an OSM PBF file for each state and store it in the <code>/&lt;state&gt;/</code> folder.</p> <p>File location: <pre><code>/&lt;state&gt;/&lt;state&gt;-latest.osm.pbf\n</code></pre></p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-7-obtain-community-target-data","title":"Step 7: Obtain Community Target Data","text":"<p>Action: Obtain the GeoJSON data for the bbox of each community target mapping area and store it in the corresponding <code>intermediate_data</code> subfolder.</p> <p>File location: <pre><code>/&lt;state&gt;/&lt;county&gt;/&lt;community&gt;/intermediate_data/&lt;community&gt;.geojson\n</code></pre></p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-8-extract-community-data-with-osmium","title":"Step 8: Extract Community Data with Osmium","text":"<p>Action: For each <code>&lt;community&gt;</code>, run <code>osmium extract</code> to trim the state <code>osm.pbf</code> file to the target mapping area.</p> <p>Command: <pre><code>osmium extract -p &lt;path-to-geojson&gt; &lt;path-to-pbf&gt; -o &lt;path-to-new-pbf&gt;\n</code></pre></p> <p>Example: <pre><code>osmium extract -p ../&lt;state&gt;/&lt;county&gt;/&lt;community&gt;/intermediate_data/&lt;community&gt;.geojson ../&lt;state&gt;/&lt;state&gt;-latest.osm.pbf -o ../&lt;state&gt;/&lt;county&gt;/&lt;community&gt;/data_sources/&lt;community&gt;.osm.pbf\n</code></pre></p> <p>Important: This command must be run from the <code>../opensidewalks_cli/staging_directory/</code> directory!</p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-9-generate-task-polygons-with-osw-task","title":"Step 9: Generate Task Polygons with OSW Task","text":"<p>Action: For each <code>&lt;community&gt;</code>, run <code>osw task</code> to generate the task polygon files (<code>crossing_tasks.geojson</code> and <code>sidewalk_tasks.geojson</code>) corresponding to the target mapping area.</p> <p>Command: <pre><code>osw task &lt;path-to-pbf&gt; &lt;path-to-geojson&gt; &lt;output-path&gt;\n</code></pre></p> <p>Example: <pre><code>osw task ../&lt;state&gt;/&lt;county&gt;/&lt;community&gt;/data_sources/&lt;community&gt;.osm.pbf ../&lt;state&gt;/&lt;county&gt;/&lt;community&gt;/intermediate_data/&lt;community&gt;.geojson .../&lt;state&gt;/&lt;county&gt;/&lt;community&gt;/output\n</code></pre></p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#step-10-rename-output-files","title":"Step 10: Rename Output Files","text":"<p>Action: For each <code>&lt;community&gt;</code>, rename the <code>crossing_tasks.geojson</code> and <code>sidewalks_tasks.geojson</code> files in the <code>../&lt;community&gt;/output</code> directory to more easily identify them as they are uploaded into the Tasking Manager.</p> <p>Rename pattern: <pre><code>mv ../&lt;community&gt;/output/crossing_tasks.geojson ../&lt;community&gt;/output/&lt;community&gt;_crossing_tasks.geojson\nmv ../&lt;community&gt;/output/sidewalk_tasks.geojson ../&lt;community&gt;/output/&lt;community&gt;_sidewalk_tasks.geojson\n</code></pre></p>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#final-directory-structure","title":"Final Directory Structure","text":"<p>After completing all steps, your directory structure should look like:</p> <pre><code>staging_directory/\n\u251c\u2500\u2500 &lt;state&gt;/\n\u2502   \u251c\u2500\u2500 &lt;state&gt;-latest.osm.pbf\n\u2502   \u2514\u2500\u2500 &lt;county&gt;/\n\u2502       \u2514\u2500\u2500 &lt;community&gt;/\n\u2502           \u251c\u2500\u2500 data_sources/\n\u2502           \u2502   \u2514\u2500\u2500 &lt;community&gt;.osm.pbf\n\u2502           \u251c\u2500\u2500 intermediate_data/\n\u2502           \u2502   \u2514\u2500\u2500 &lt;community&gt;.geojson\n\u2502           \u2514\u2500\u2500 output/\n\u2502               \u251c\u2500\u2500 &lt;community&gt;_crossing_tasks.geojson\n\u2502               \u2514\u2500\u2500 &lt;community&gt;_sidewalk_tasks.geojson\n\u2502\n\u2514\u2500\u2500 [Additional states follow same pattern]\n</code></pre>","tags":["Guide"]},{"location":"opensidewalks/tasking-manager/guides/task-polygon-automation/#next-steps","title":"Next Steps","text":"<p>The generated task polygon files (<code>&lt;community&gt;_crossing_tasks.geojson</code> and <code>&lt;community&gt;_sidewalk_tasks.geojson</code>) are now ready to be uploaded to the Tasking Manager for community mapping activities.</p>","tags":["Guide"]},{"location":"tdei/","title":"TDEI","text":"<p>The Transportation Data Exchange Initiative (TDEI) is focused on developing a shared, standardized framework for transportation data, enabling seamless integration across mobility systems. This project aims to provide mobility benefits for travelers and service providers by collecting and providing infrastructure to sustainably support open data about sidewalks, transit paths, and on-demand transit services. Through supporting the collection, maintenance, and exchange of detailed data on pedestrian pathways, transit networks, and on-demand services, TDEI lays the groundwork for more effective transportation planning and innovation.</p> <p>Reliable data is essential for decision-making. TDEI addresses gaps in transportation data through a three-pronged approach:</p> <ul> <li>Enhance data standards to include information relevant to all travelers and transit stakeholders.</li> <li>Provide tools and data infrastructure reducing barriers for data stewards to collect, vet, maintain and use traveler-centric transportation data at scale.</li> <li>Demonstrate our work through pilot data collections with private and public partners, and demonstration projects that make use of our data.</li> </ul> <p>With the support of the Transportation Data Exchange Initiative (TDEI), the OpenSidewalks project and its suite of tools\u2014including AccessMap\u2014provide detailed insights into sidewalk connectivity and pedestrian networks. These resources equip individuals, civic organizations, and government agencies with the data needed to support informed mobility planning and decision-making.</p> <p>TDEI is a project sponsored by the ITS4US Deployment Program, focused on improving frameworks for transportation services and infrastructure. By developing open-source data collection tools, digital infrastructure, and governance models, TDEI enables seamless public-private data exchange and interoperability.</p>"},{"location":"tdei/#user-registration-and-access","title":"User Registration and Access","text":"<p>All TDEI users register through the same process and receive an API key and access credentials. Users are differentiated by their assigned roles and permissions.</p> <p>API keys are used to retrieve data from TDEI. Access credentials are used to log into the portal, retrieve or regenerate API keys, and upload data.</p>"},{"location":"tdei/#roles","title":"Roles","text":""},{"location":"tdei/#data-consumer","title":"Data Consumer","text":"<p>A data consumer is a user who will read data from the TDEI. Any person can register with the TDEI to be a data consumer.</p>"},{"location":"tdei/#point-of-contact","title":"Point of Contact","text":"<p>Each Project Group must have a designated Point of Contact (PoC). They have the authority to approve access for data generators for that Project Group. The purpose of the PoC is to ensure that staff from the related agency, company, or group with the proper authority are approving access for data generators.</p>"},{"location":"tdei/#data-generator","title":"Data Generator","text":"<p>A data generator is a user who will contribute data to the TDEI.</p>"},{"location":"tdei/#flex-data-generator","title":"Flex Data Generator","text":"<p>The <code>flex-data-generator</code> role allows a user to create GTFS Flex data.</p>"},{"location":"tdei/#pathways-data-generator","title":"Pathways Data Generator","text":"<p>The <code>pathways-data-generator</code> role allows a user to create GTFS Pathways data.</p>"},{"location":"tdei/#opensidewalks-data-generator","title":"OpenSidewalks Data Generator","text":"<p>The <code>osw-data-generator</code> role allows a user to upload OpenSidewalks data.</p>"},{"location":"tdei/consumers/","title":"TDEI Data Consuming Applications","text":"<p>Transportation Data Exchange Initiative Data Consuming Applications</p>"},{"location":"tdei/consumers/#accessmap","title":"AccessMap","text":"<p>Accessibility-forward customizable router.</p>"},{"location":"tdei/consumers/#walkshed","title":"Walkshed","text":"<p>Walkshed analysis tool.</p>"},{"location":"tdei/consumers/accessmap/","title":"AccessMap","text":"<p>AccessMap (https://accessmap.app) provides detailed information in select cities on pedestrian paths, transit stations, elevation changes, curb ramps, and more to enable accessibility-focused routing.</p>"},{"location":"tdei/consumers/accessmap/#guides","title":"Guides","text":"<p>Guides for AccessMap.</p>"},{"location":"tdei/consumers/accessmap/guides/","title":"AccessMap Guides","text":"<p>Guides for AccessMap.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p> <p>Coming soon!</p>","tags":["Guide"]},{"location":"tdei/consumers/walkshed/","title":"TDEI Walkshed","text":"<p>TDEI Walkshed is a tool for analyzing pedestrian infrastructure and access to amenities.</p>"},{"location":"tdei/consumers/walkshed/#guides","title":"Guides","text":"<p>Guides for Walkshed.</p>"},{"location":"tdei/consumers/walkshed/guides/","title":"Walkshed Guides","text":"<p>Guides for Walkshed.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p> <p>Coming soon!</p>","tags":["Guide"]},{"location":"tdei/producers/","title":"TDEI Data Producing Applications","text":"<p>Transportation Data Exchange Initiative Data Producing Applications</p>"},{"location":"tdei/producers/#workspaces","title":"Workspaces","text":"<p>Platform providing dataset editing functionality.</p>"},{"location":"tdei/producers/#rapid","title":"Rapid","text":"<p>Embedded in-browser web editor.</p>"},{"location":"tdei/producers/#aviv-scoutroute","title":"AVIV ScoutRoute","text":"<p>Mobile applications for both Android and iOS.</p>"},{"location":"tdei/producers/imagery-capture/","title":"Imagery Capture","text":"<p>Capturing images (and/or depth maps) of on-the-ground locations.</p>"},{"location":"tdei/producers/imagery-capture/#guides","title":"Guides","text":"<p>Guides for imagery capture.</p>"},{"location":"tdei/producers/imagery-capture/guides/","title":"Imagery Capture Guides","text":"<p>Guides for Imagery Capture.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"tdei/producers/imagery-capture/guides/#track-recording","title":"Track Recording","text":"<p>This guide explains how to use mobile applications to record GPS tracks.</p>","tags":["Guide"]},{"location":"tdei/producers/imagery-capture/guides/track-recording/","title":"Track Recording","text":"<p>This guide explains how to use mobile applications to record GPS tracks.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p> <p>Coming soon! For additional information, refer to the Recording GPS tracks page on the OSM Wiki.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/","title":"Workspaces","text":"<p>Workspaces Platform</p>"},{"location":"tdei/producers/workspaces/#editors","title":"Editors","text":"<p>There are multiple ways of submitting edits to data in an open workspace.</p>"},{"location":"tdei/producers/workspaces/#aviv-scoutroute","title":"AVIV ScoutRoute","text":"<p>AVIV ScoutRoute (formerly GoInfoGame (GitHub)) is a volunteerism app based on StreetComplete that leverages the power of crowdsourcing to gather critical pedestrian and accessibility information.</p>"},{"location":"tdei/producers/workspaces/#rapid","title":"Rapid","text":"<p>Rapid is an extended version of the OpenStreetMap iD editor. A modified version of Rapid is embedded in Workspaces and can be used to edit data in open workspaces.</p>"},{"location":"tdei/producers/workspaces/#josm","title":"JOSM","text":"<p>The Java OpenStreetMap Editor (JOSM) is a powerful OpenStreetMap editor for advanced users.</p>"},{"location":"tdei/producers/workspaces/aviv-scoutroute/","title":"AVIV ScoutRoute","text":"<p>AVIV ScoutRoute (GitHub), formerly \"GoInfoGame\" is a volunteerism app based on StreetComplete that leverages the power of crowdsourcing to gather critical pedestrian and accessibility information.</p>"},{"location":"tdei/producers/workspaces/aviv-scoutroute/#guides","title":"Guides","text":"<p>Guides for AVIV ScoutRoute.</p>"},{"location":"tdei/producers/workspaces/aviv-scoutroute/guides/","title":"AVIV ScoutRoute Guides","text":"<p>Guides for AVIV ScoutRoute.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/guides/#aviv-scoutroute-user-manual","title":"AVIV ScoutRoute User Manual","text":"<p>This guide explains how to install and use the AVIV ScoutRoute mobile app.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/guides/user-manual/","title":"AVIV ScoutRoute User Manual","text":"<p>This guide explains how to install and use the AVIV ScoutRoute mobile app.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p> <p>Coming soon!</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/","title":"Long Form Quest Definition","text":"<p>Long Form Quest Definitions are JSON files that define the quests used by AVIV ScoutRoute.</p>"},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/#schema","title":"Schema","text":"<p>The Long Form Quest Definition JSON Schema is available on GitHub.</p>"},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/#guides","title":"Guides","text":"<p>Guides for Long Form Quest Definitions.</p>"},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/","title":"Long Form Quest Definition Guides","text":"<p>Guides for Long Form Quest Definitions.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/#element-query-guide","title":"Element Query Guide","text":"<p>This guide explains how to format the element query selector for use in AVIV ScoutRoute Long Form Quest Definitions.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/#element-type-icon-guide","title":"Element Type Icon Guide","text":"<p>This guide explains how to assign the correct value for the <code>element_type_icon</code> key in the Long Form Quest Definition JSON file used by AVIV ScoutRoute.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/element-query/","title":"Element Query Guide","text":"<p>This guide explains how to format the element query selector for use in AVIV ScoutRoute Long Form Quest Definitions.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p> <p>The <code>quest_query</code> attribute of an AVIV ScoutRoute long form quest definition is constructed in a similar way to an OverPass API query, with some modifications.</p> <p>For example, to get all ways, simply enter the query: <code>ways</code></p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/element-query/#cheatsheet-for-element-filter-syntax","title":"Cheatsheet for element filter syntax","text":"Expression [matches] returns <code>true</code> if element... <code>shop</code> has a tag with key <code>shop</code> <code>!shop</code> doesn't have a tag with key <code>shop</code> <code>shop = car</code> has a tag with key <code>shop</code> whose value is <code>car</code> <code>shop != car</code> doesn't have a tag with key <code>shop</code> whose value is <code>car</code> <code>~shop\\|craft</code> has a tag whose key matches the regex <code>shop\\|craft</code> <code>!~shop\\|craft</code> doesn't have a tag whose key matches the regex <code>shop\\|craft</code> <code>shop ~ car\\|boat</code> has a tag whose key is <code>shop</code> and whose value matches the regex <code>car\\|boat</code> <code>shop !~ car\\|boat</code> doesn't have a tag whose key is <code>shop</code> and value matches the regex <code>car\\|boat</code> <code>~shop\\|craft ~ car\\|boat</code> has a tag whose key matches <code>shop\\|craft</code> and value matches <code>car\\|boat</code> (both regexes) <code>~shop\\|craft !~ car\\|boat</code> doesn't have a tag whose key matches <code>shop\\|craft</code> and value matches <code>car\\|boat</code> (both regexes) <code>foo &lt; 3.3</code> has a tag with key <code>foo</code> whose value is smaller than 2.5<code>&lt;</code>,<code>&lt;=</code>,<code>&gt;=</code>,<code>&gt;</code> work likewise <code>foo &lt; 3.3ft</code> same as above but value is smaller than 3.3 feet (~1 meter)This works for other units as well (mph, st, lbs, yds...) <code>foo &lt; 3'4\"</code> same as above but value is smaller than 3 feet, 4 inches (~1 meter) <code>foo &lt; 2012-10-01</code> same as above but value is a date older than Oct 1st 2012 <code>foo &lt; today -1.5 years</code> same as above but value is a date older than 1.5 yearsIn place of <code>years</code>, <code>months</code>, <code>weeks</code> or <code>days</code> also work <code>shop newer today -99 days</code> has a tag with key <code>shop</code> which has been modified in the last 99 days. Absolute dates work as well. <code>shop older today -1 months</code> has a tag with key <code>shop</code> which hasn't been changed for more than a month. Absolute dates work as well. <code>shop and name</code> has both a tag with key <code>shop</code> and a tag with key <code>name</code> <code>shop or craft</code> has either a tag with key <code>shop</code> or a tag with key <code>craft</code> <code>shop and (ref or name)</code> has a tag with key <code>shop</code> and either a tag with key <code>ref</code> or a tag with key <code>name</code> <code>shop and !(ref or name)</code> has a tag with key <code>shop</code> but not either a tag with key <code>ref</code> or a tag with key <code>name</code> <p>Note that regexes have to match the whole string, i.e. <code>~shop\\|craft</code> does not match <code>shop_type</code>.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/element-query/#equivalent-expressions","title":"Equivalent expressions","text":"Expression Equivalent Expression <code>shop and shop = boat</code> <code>shop = boat</code> <code>!shop or shop != boat</code> <code>shop != boat</code> <code>shop = car or shop = boat</code> <code>shop ~ car\\|boat</code> <code>craft or shop and name</code> <code>craft or (shop and name)</code> (<code>and</code> has higher precedence) <code>!(amenity and craft)</code> <code>!amenity or !craft</code> <code>!(amenity or craft)</code> <code>!amenity and !craft</code> <p>The queries can be combined with parenthesis and can also be used for matching with multiple tag filters.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/element-query/#example-queries","title":"Example queries:","text":"<ul> <li> <p>Get all sidewalks: <code>ways with (footway=sidewalk)</code></p> </li> <li> <p>Get all sidewalks without a surface tag: <code>ways with (footway=sidewalk and !surface)</code></p> </li> <li> <p>Get all kerbs without a tactile_paving tag: <code>nodes with (barrier=kerb and !tactile_paving)</code></p> </li> </ul>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/element-type-icon/","title":"Element Type Icon Guide","text":"<p>This guide explains how to assign the correct value for the <code>element_type_icon</code> key in the Long Form Quest Definition JSON file used by AVIV ScoutRoute.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p> <p>These icons help the mobile app display appropriate quest icons for each element type (like sidewalks, crossings, kerbs, etc.).</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/element-type-icon/#instructions","title":"Instructions","text":"<ol> <li>Open the Icon Reference Website</li> <li>Search for the Appropriate Icon</li> <li>Use the search bar on the website to search for an icon related to the element you're working with (e.g., \"sidewalk\", \"crossing\", \"kerb\").</li> <li>Find the Icon Name</li> <li>Once you've located a suitable icon, click on it.</li> <li>Copy the exact icon name (e.g., sidewalk, car_charger_capacity).</li> <li>Add It to Your Quest Definition</li> <li>Insert the icon name as the value for the <code>element_type_icon</code> key.</li> <li>Make sure to not include any file extension (like .png or .svg)</li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/element-type-icon/#example","title":"Example:","text":"<pre><code>  \"element_type\": \"Sidewalks\",\n  \"element_type_icon\": \"sidewalk\",\n  \"quest_query\": \"ways with (highway=footway and footway=sidewalk)\",\n  \"quests\": [ ... ]\n</code></pre>","tags":["Guide"]},{"location":"tdei/producers/workspaces/aviv-scoutroute/long-form/guides/element-type-icon/#how-the-mobile-app-uses-it","title":"How the Mobile App Uses It","text":"<ul> <li>The mobile app will parse the element_type_icon field from the JSON.</li> <li>If the value matches an icon available in the app, that icon is shown.</li> <li>If the value is missing or doesn't match, the app will fall back to a default icon.</li> </ul>","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/","title":"Workspaces Guides","text":"<p>Guides for Workspaces.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/#workspaces-export-guide","title":"Workspaces Export Guide","text":"<p>This guide explains how to directly export a dataset in <code>.osm</code> format from Workspaces.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/workspaces-export/","title":"Workspaces Export Guide","text":"<p>This guide explains how to directly export a dataset in <code>.osm</code> format from Workspaces.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/workspaces-export/#legend","title":"Legend","text":"<ol> <li> <p>Keyboard shortcut to press | Action</p> <p>(<code>Shift</code> + <code>C</code>) | Copy</p> </li> <li> <p>Command to enter into terminal</p> <p>[<code>someCommand --arguments &lt;path&gt;</code>]</p> </li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/workspaces-export/#instructions","title":"Instructions","text":"","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/workspaces-export/#1-determine-your-environment","title":"1. Determine your environment","text":"<ol> <li> <p>Prod: portal.tdei.us + workspaces.sidewalks.washington.edu</p> </li> <li> <p>Stage: portal-stage.tdei.us + workspaces-stage.sidewalks.washington.edu</p> </li> <li> <p>Dev: portal-dev.tdei.us + workspaces-dev.sidewalks.washington.edu</p> </li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/workspaces-export/#2-find-your-api-key","title":"2. Find your API key","text":"<ol> <li>Log in and navigate to the Dashboard section of your environment's TDEI Portal</li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/workspaces-export/#3-find-the-workspace-id","title":"3. Find the Workspace ID","text":"<ol> <li> <p>Extract the ID from the Workspace link, in this case <code>332</code>:</p> <p>https://workspaces-stage.sidewalks.washington.edu/workspace/332/edit</p> </li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/workspaces-export/#4-export-the-workspace","title":"4. Export the Workspace","text":"","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/workspaces-export/#option-1-workspace-export-utility-recommended","title":"Option 1: Workspace Export Utility (Recommended!)","text":"<ol> <li> <p>Download the Workspaces Export Script from the TDEI Tools repository.</p> </li> <li> <p>Run the script and follow the instructions.</p> </li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/guides/workspaces-export/#option-2-manually-query-the-workspaces-api","title":"Option 2: Manually Query the Workspaces API","text":"<ol> <li> <p>Find the dataset's bbox</p> <ol> <li> <p>In your browser, substitute the target Workspace ID and open:</p> <p>Example URL:</p> <p>https://osm.workspaces-stage.sidewalks.washington.edu/api/0.6/workspaces/332/bbox.json</p> <p>Example output:</p> <p><code>{\"min_lat\":47.6795959,\"min_lon\":-122.3789819,\"max_lat\":47.6795962,\"max_lon\":-122.3788774}</code></p> </li> </ol> </li> <li> <p>Construct request URL with above bbox query output, in <code>min_lon,min_lat,max_lon,max_lat</code> format.</p> <p><code>https://osm.workspaces.sidewalks.washington.edu/api/0.6/map?bbox=-122.33276367187499,47.66168780332917,-122.3272705078125,47.66538735632654</code></p> </li> <li> <p>In PowerShell: (replace <code>TDEI_TOKEN</code> with your copied API key, and replace <code>FILE_NAME</code> with your desired file name)</p> <p>It is recommended to follow a file name convention like <code>export-ENV-ID-DATE-N.osm</code> (example: <code>export-stage-332-20250721-1.osm</code>)</p> <p>[<code>$headers = @{ Authorization = 'TDEI_TOKEN'; 'X-Workspace' = '332' }; Invoke-WebRequest -Uri 'https://osm.workspaces-stage.sidewalks.washington.edu/api/0.6/map?bbox=-122.3789819,47.6795959,-122.3788774,47.6795962' -Headers $headers -OutFile 'FILE_NAME.osm'</code>]</p> </li> <li> <p>This outputs a <code>FILE_NAME.osm</code> file in the current directory.</p> </li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/","title":"JOSM","text":"<p>The Java OpenStreetMap Editor (JOSM) is a powerful OpenStreetMap editor for advanced users.</p>"},{"location":"tdei/producers/workspaces/josm/#guides","title":"Guides","text":"<p>Guides for JOSM.</p>"},{"location":"tdei/producers/workspaces/josm/guides/","title":"JOSM Guides","text":"<p>Guides for JOSM.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/guides/#workspaces-josm-settings-guide","title":"Workspaces JOSM Settings Guide","text":"<p>This guide explains how to use the Workspaces JOSM Settings Script from TDEI Tools to set up JOSM to enable editing of Workspaces.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/guides/workspaces-josm/","title":"Workspaces JOSM Settings Guide","text":"<p>This guide explains how to use the Workspaces JOSM Settings Script from TDEI Tools to set up JOSM to enable editing of Workspaces.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/guides/workspaces-josm/#instructions","title":"Instructions","text":"<p>Note: You must have a TDEI Portal account.</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/guides/workspaces-josm/#1-download-and-run-the-helper-script","title":"1. Download and run the helper script","text":"<ol> <li>Download the Workspaces JOSM Settings Script from TDEI Tools.</li> <li>Run the script by right clicking and selecting \"Run with PowerShell\"</li> </ol> <p>Now, follow the script's instructions and enter the requested information:</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/guides/workspaces-josm/#2-determine-your-environment","title":"2. Determine your environment","text":"<ol> <li> <p>Prod: portal.tdei.us + workspaces.sidewalks.washington.edu</p> </li> <li> <p>Stage: portal-stage.tdei.us + workspaces-stage.sidewalks.washington.edu</p> </li> <li> <p>Dev: portal-dev.tdei.us + workspaces-dev.sidewalks.washington.edu</p> </li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/guides/workspaces-josm/#3-enter-your-tdei-credentials","title":"3. Enter your TDEI credentials","text":"<ol> <li>Enter the credentials for the account you use to sign into both the TDEI Portal and Workspaces.</li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/guides/workspaces-josm/#4-find-your-workspace-id","title":"4. Find your Workspace ID","text":"<ol> <li>Extract the ID from the Workspace link, in this case <code>125</code>:</li> </ol> <p><code>https://workspaces.sidewalks.washington.edu/workspace/125/settings</code></p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/guides/workspaces-josm/#5-generate-josm-settings","title":"5. Generate JOSM Settings","text":"<ol> <li>After entering the Workspace ID, the script will authenticate you and output two strings:</li> </ol>","tags":["Guide"]},{"location":"tdei/producers/workspaces/josm/guides/workspaces-josm/#6-apply-josm-settings","title":"6. Apply JOSM Settings","text":"<ol> <li>Open JOSM's \"Preferences\" Menu</li> </ol> <ol> <li>Navigate to the \"OSM Server\" menu</li> </ol> <ol> <li>If present, click \"Remove token\"</li> </ol> <ol> <li>Uncheck \"Use the default OSM server URL\"</li> <li>Paste in the generated URL from the script</li> <li>Select \"Use Basic Authentication\"</li> <li>Paste in the generated Access Token in the \"OSM username\" field</li> <li>Enter <code>none</code> in the \"OSM password\" field</li> </ol> <ol> <li>Save your settings changes.</li> </ol> <p>You should now be able to use JOSM to edit the specified Workspace!</p>","tags":["Guide"]},{"location":"tdei/producers/workspaces/rapid/","title":"Rapid","text":"<p>Rapid is an extended version of the OpenStreetMap iD editor. A modified version of Rapid is embedded in Workspaces and can be used to edit data in open workspaces.</p>"},{"location":"tdei/producers/workspaces/rapid/#guides","title":"Guides","text":"<p>Guides for Rapid.</p>"},{"location":"tdei/producers/workspaces/rapid/guides/","title":"Rapid Guides","text":"<p>Guides for Rapid.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p> <p>Coming soon!</p>","tags":["Guide"]},{"location":"tdei/tdei-core/","title":"TDEI Core","text":"<p>Transportation Data Exchange Initiative Core</p>"},{"location":"tdei/tdei-core/guides/","title":"TDEI Core Guides","text":"<p>Guides for TDEI Core.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p>","tags":["Guide"]},{"location":"tdei/tdei-core/guides/#tdei-account-registration","title":"TDEI Account Registration","text":"<p>This guide explains how to register for a TDEI account using the TDEI Portal.</p>","tags":["Guide"]},{"location":"tdei/tdei-core/guides/tdei-account-registration/","title":"TDEI Account Registration","text":"<p>This guide explains how to register for a TDEI account using the TDEI Portal.</p> <p>For a list of all guides on the TCAT Wiki, refer to the Guides List.</p> <p>Coming soon!</p>","tags":["Guide"]}]}